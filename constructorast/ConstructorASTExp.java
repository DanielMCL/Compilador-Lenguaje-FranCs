
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Fri May 05 14:56:50 CEST 2023
//----------------------------------------------------

package constructorast;

import java_cup.runtime.*;
import alex.AnalizadorLexicoExp;
import alex.UnidadLexica;
import alex.TokenValue;
import errors.GestionErroresTiny;
import java.util.ArrayList;
import ast.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Fri May 05 14:56:50 CEST 2023
  */
public class ConstructorASTExp extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorASTExp() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\201\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\030\003\000\002\030\003\000\002\030\004" +
    "\000\002\014\003\000\002\014\003\000\002\061\002\000" +
    "\002\014\005\000\002\015\007\000\002\015\007\000\002" +
    "\015\007\000\002\016\007\000\002\017\005\000\002\017" +
    "\006\000\002\027\011\000\002\013\004\000\002\013\002" +
    "\000\002\026\003\000\002\026\003\000\002\026\004\000" +
    "\002\026\003\000\002\062\002\000\002\026\005\000\002" +
    "\020\003\000\002\020\002\000\002\021\005\000\002\021" +
    "\003\000\002\025\012\000\002\025\012\000\002\025\012" +
    "\000\002\025\012\000\002\025\012\000\002\025\012\000" +
    "\002\025\007\000\002\025\007\000\002\031\003\000\002" +
    "\031\002\000\002\032\005\000\002\032\004\000\002\032" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\047\011\000\002\050\015\000" +
    "\002\044\015\000\002\044\006\000\002\044\011\000\002" +
    "\045\011\000\002\045\006\000\002\045\010\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\033\006\000" +
    "\002\033\007\000\002\033\004\000\002\033\005\000\002" +
    "\035\005\000\002\035\006\000\002\034\004\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\041\006" +
    "\000\002\041\006\000\002\042\006\000\002\042\006\000" +
    "\002\040\004\000\002\012\006\000\002\053\003\000\002" +
    "\053\003\000\002\054\005\000\002\054\005\000\002\036" +
    "\003\000\002\036\005\000\002\036\002\000\002\037\005" +
    "\000\002\003\003\000\002\003\005\000\002\004\003\000" +
    "\002\004\005\000\002\004\005\000\002\005\003\000\002" +
    "\005\005\000\002\006\003\000\002\006\004\000\002\007" +
    "\003\000\002\007\004\000\002\007\004\000\002\010\003" +
    "\000\002\010\005\000\002\010\003\000\002\010\003\000" +
    "\002\011\003\000\002\011\003\000\002\051\005\000\002" +
    "\051\005\000\002\051\003\000\002\052\003\000\002\052" +
    "\006\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\055\003\000\002\055\003\000\002\055\003\000" +
    "\002\056\003\000\002\056\003\000\002\057\003\000\002" +
    "\060\003\000\002\060\003\000\002\060\003\000\002\060" +
    "\003\000\002\022\003\000\002\022\002\000\002\022\003" +
    "\000\002\023\003\000\002\023\005\000\002\024\004\000" +
    "\002\024\005\000\002\024\005\000\002\024\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\371\000\022\002\uffff\004\uffff\033\uffff\034\uffff\035" +
    "\uffff\036\uffff\040\uffff\042\uffff\001\002\000\022\002\016" +
    "\004\013\033\014\034\024\035\022\036\011\040\023\042" +
    "\020\001\002\000\022\002\001\004\001\033\001\034\001" +
    "\035\001\036\001\040\001\042\001\001\002\000\022\002" +
    "\ufffa\004\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\040\ufffa" +
    "\042\ufffa\001\002\000\004\054\373\001\002\000\006\004" +
    "\355\005\230\001\002\000\010\004\uffbd\005\uffbd\006\uffbd" +
    "\001\002\000\022\002\ufffd\004\ufffd\033\ufffd\034\ufffd\035" +
    "\ufffd\036\ufffd\040\ufffd\042\ufffd\001\002\000\010\004\uffbe" +
    "\005\uffbe\006\uffbe\001\002\000\004\004\341\001\002\000" +
    "\022\002\ufffb\004\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb" +
    "\040\ufffb\042\ufffb\001\002\000\004\002\000\001\002\000" +
    "\004\054\ufff9\001\002\000\004\004\321\001\002\000\022" +
    "\002\ufffe\004\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\040" +
    "\ufffe\042\ufffe\001\002\000\010\004\013\036\011\040\023" +
    "\001\002\000\010\004\uffbc\005\uffbc\006\uffbc\001\002\000" +
    "\004\004\025\001\002\000\004\052\026\001\002\000\020" +
    "\004\uffef\007\uffef\033\uffef\035\uffef\036\uffef\040\uffef\042" +
    "\uffef\001\002\000\020\004\031\007\032\033\014\035\022" +
    "\036\011\040\023\042\020\001\002\000\004\054\315\001" +
    "\002\000\010\004\uffbe\005\uffbe\045\042\001\002\000\022" +
    "\002\ufff4\004\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\040" +
    "\ufff4\042\ufff4\001\002\000\020\004\uffeb\007\uffeb\033\uffeb" +
    "\035\uffeb\036\uffeb\040\uffeb\042\uffeb\001\002\000\004\054" +
    "\uffea\001\002\000\020\004\uffee\007\uffee\033\uffee\035\uffee" +
    "\036\uffee\040\uffee\042\uffee\001\002\000\020\004\uffed\007" +
    "\uffed\033\uffed\035\uffed\036\uffed\040\uffed\042\uffed\001\002" +
    "\000\020\004\ufff0\007\ufff0\033\ufff0\035\ufff0\036\ufff0\040" +
    "\ufff0\042\ufff0\001\002\000\004\054\041\001\002\000\020" +
    "\004\uffe9\007\uffe9\033\uffe9\035\uffe9\036\uffe9\040\uffe9\042" +
    "\uffe9\001\002\000\014\003\045\004\013\036\011\040\023" +
    "\046\uff88\001\002\000\010\004\311\005\230\006\310\001" +
    "\002\000\004\046\052\001\002\000\004\046\uff87\001\002" +
    "\000\006\046\uff86\051\uff86\001\002\000\006\046\uff89\051" +
    "\050\001\002\000\010\004\013\036\011\040\023\001\002" +
    "\000\006\046\uff85\051\uff85\001\002\000\004\052\053\001" +
    "\002\000\030\004\064\007\uffdb\010\071\026\065\030\074" +
    "\031\106\032\060\036\011\040\023\055\054\056\070\001" +
    "\002\000\004\045\303\001\002\000\032\003\uffd7\004\uffd7" +
    "\007\uffd7\010\uffd7\026\uffd7\030\uffd7\031\uffd7\032\uffd7\036" +
    "\uffd7\040\uffd7\055\uffd7\056\uffd7\001\002\000\010\003\uffc9" +
    "\007\uffc9\054\uffc9\001\002\000\004\023\301\001\002\000" +
    "\006\003\264\043\265\001\002\000\060\003\uff99\005\uff99" +
    "\007\uff99\011\uff99\012\uff99\013\uff99\014\uff99\015\uff99\016" +
    "\uff99\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99\024\uff99" +
    "\025\uff99\044\uff99\046\uff99\047\202\050\uff99\051\uff99\053" +
    "\261\054\uff99\001\002\000\010\003\uffcb\007\uffcb\054\uffcb" +
    "\001\002\000\010\003\uffd8\007\uffd8\054\257\001\002\000" +
    "\016\004\uffbe\005\uffbe\023\uff98\045\uffb5\047\uff98\053\uff98" +
    "\001\002\000\004\043\245\001\002\000\006\004\231\005" +
    "\230\001\002\000\006\003\uffdc\007\uffdc\001\002\000\004" +
    "\045\223\001\002\000\004\053\221\001\002\000\004\045" +
    "\213\001\002\000\004\045\uffb4\001\002\000\006\003\163" +
    "\043\164\001\002\000\010\003\uffc7\007\uffc7\054\uffc7\001" +
    "\002\000\032\003\uffdb\004\064\007\uffdb\010\071\026\065" +
    "\030\074\031\106\032\060\036\011\040\023\055\054\056" +
    "\070\001\002\000\010\003\uffc8\007\uffc8\054\uffc8\001\002" +
    "\000\032\003\uffd5\004\uffd5\007\uffd5\010\uffd5\026\uffd5\030" +
    "\uffd5\031\uffd5\032\uffd5\036\uffd5\040\uffd5\055\uffd5\056\uffd5" +
    "\001\002\000\010\003\uffc6\007\uffc6\054\uffc6\001\002\000" +
    "\032\003\uffd4\004\uffd4\007\uffd4\010\uffd4\026\uffd4\030\uffd4" +
    "\031\uffd4\032\uffd4\036\uffd4\040\uffd4\055\uffd4\056\uffd4\001" +
    "\002\000\010\003\uffca\007\uffca\054\uffca\001\002\000\004" +
    "\007\161\001\002\000\032\003\uffd6\004\uffd6\007\uffd6\010" +
    "\uffd6\026\uffd6\030\uffd6\031\uffd6\032\uffd6\036\uffd6\040\uffd6" +
    "\055\uffd6\056\uffd6\001\002\000\024\004\111\005\113\006" +
    "\112\010\071\011\130\012\107\037\114\041\127\043\115" +
    "\001\002\000\024\004\uff8f\005\uff8f\006\uff8f\010\uff8f\011" +
    "\uff8f\012\uff8f\037\uff8f\041\uff8f\043\uff8f\001\002\000\052" +
    "\003\uff9d\005\uff9d\007\uff9d\011\uff9d\012\uff9d\013\uff9d\014" +
    "\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d" +
    "\024\uff9d\025\uff9d\044\uff9d\046\uff9d\050\uff9d\051\uff9d\054" +
    "\uff9d\001\002\000\060\003\uff98\005\uff98\007\uff98\011\uff98" +
    "\012\uff98\013\uff98\014\uff98\015\uff98\016\uff98\017\uff98\020" +
    "\uff98\021\uff98\022\uff98\024\uff98\025\uff98\044\uff98\045\uffb5" +
    "\046\uff98\047\uff98\050\uff98\051\uff98\053\uff98\054\uff98\001" +
    "\002\000\014\004\111\010\071\037\114\041\127\043\115" +
    "\001\002\000\014\004\111\010\071\037\114\041\127\043" +
    "\115\001\002\000\052\003\uff9e\005\uff9e\007\uff9e\011\uff9e" +
    "\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e\020" +
    "\uff9e\021\uff9e\022\uff9e\024\uff9e\025\uff9e\044\uff9e\046\uff9e" +
    "\050\uff9e\051\uff9e\054\uff9e\001\002\000\024\004\111\005" +
    "\113\006\112\010\071\011\130\012\107\037\114\041\127" +
    "\043\115\001\002\000\052\003\uff9c\005\uff9c\007\uff9c\011" +
    "\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c" +
    "\020\uff9c\021\uff9c\022\uff9c\024\uff9c\025\uff9c\044\uff9c\046" +
    "\uff9c\050\uff9c\051\uff9c\054\uff9c\001\002\000\052\003\uffa1" +
    "\005\uffa1\007\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1\015" +
    "\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\024\uffa1" +
    "\025\uffa1\044\uffa1\046\uffa1\050\uffa1\051\uffa1\054\uffa1\001" +
    "\002\000\024\003\uffb7\007\uffb7\015\152\016\151\017\153" +
    "\020\146\021\150\022\147\054\uffb7\001\002\000\052\003" +
    "\uffa4\005\uffa4\007\uffa4\011\uffa4\012\uffa4\013\uffa4\014\uffa4" +
    "\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\024" +
    "\uffa4\025\uffa4\044\uffa4\046\uffa4\050\uffa4\051\uffa4\054\uffa4" +
    "\001\002\000\052\003\uffa6\005\uffa6\007\uffa6\011\uffa6\012" +
    "\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6" +
    "\021\uffa6\022\uffa6\024\uffa6\025\uffa6\044\uffa6\046\uffa6\050" +
    "\uffa6\051\uffa6\054\uffa6\001\002\000\052\003\uffa8\005\uffa8" +
    "\007\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8\016" +
    "\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\024\uffa8\025\uffa8" +
    "\044\uffa8\046\uffa8\050\uffa8\051\uffa8\054\uffa8\001\002\000" +
    "\052\003\uffab\005\140\007\uffab\011\uffab\012\uffab\013\137" +
    "\014\136\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022" +
    "\uffab\024\141\025\uffab\044\uffab\046\uffab\050\uffab\051\uffab" +
    "\054\uffab\001\002\000\042\003\uffad\007\uffad\011\130\012" +
    "\107\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad" +
    "\025\134\044\uffad\046\uffad\050\uffad\051\uffad\054\uffad\001" +
    "\002\000\020\004\111\005\113\006\112\010\071\037\114" +
    "\041\127\043\115\001\002\000\052\003\uff9f\005\uff9f\007" +
    "\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f" +
    "\017\uff9f\020\uff9f\021\uff9f\022\uff9f\024\uff9f\025\uff9f\044" +
    "\uff9f\046\uff9f\050\uff9f\051\uff9f\054\uff9f\001\002\000\024" +
    "\004\uff90\005\uff90\006\uff90\010\uff90\011\uff90\012\uff90\037" +
    "\uff90\041\uff90\043\uff90\001\002\000\052\003\uffa5\005\uffa5" +
    "\007\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\016" +
    "\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\024\uffa5\025\uffa5" +
    "\044\uffa5\046\uffa5\050\uffa5\051\uffa5\054\uffa5\001\002\000" +
    "\024\004\111\005\113\006\112\010\071\011\130\012\107" +
    "\037\114\041\127\043\115\001\002\000\024\004\111\005" +
    "\113\006\112\010\071\011\130\012\107\037\114\041\127" +
    "\043\115\001\002\000\024\004\uff8e\005\uff8e\006\uff8e\010" +
    "\uff8e\011\uff8e\012\uff8e\037\uff8e\041\uff8e\043\uff8e\001\002" +
    "\000\052\003\uffaa\005\140\007\uffaa\011\uffaa\012\uffaa\013" +
    "\137\014\136\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa" +
    "\022\uffaa\024\141\025\uffaa\044\uffaa\046\uffaa\050\uffaa\051" +
    "\uffaa\054\uffaa\001\002\000\024\004\uff8c\005\uff8c\006\uff8c" +
    "\010\uff8c\011\uff8c\012\uff8c\037\uff8c\041\uff8c\043\uff8c\001" +
    "\002\000\024\004\uff8d\005\uff8d\006\uff8d\010\uff8d\011\uff8d" +
    "\012\uff8d\037\uff8d\041\uff8d\043\uff8d\001\002\000\024\004" +
    "\uff8b\005\uff8b\006\uff8b\010\uff8b\011\uff8b\012\uff8b\037\uff8b" +
    "\041\uff8b\043\uff8b\001\002\000\024\004\uff8a\005\uff8a\006" +
    "\uff8a\010\uff8a\011\uff8a\012\uff8a\037\uff8a\041\uff8a\043\uff8a" +
    "\001\002\000\024\004\111\005\113\006\112\010\071\011" +
    "\130\012\107\037\114\041\127\043\115\001\002\000\052" +
    "\003\uffa7\005\uffa7\007\uffa7\011\uffa7\012\uffa7\013\uffa7\014" +
    "\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7" +
    "\024\uffa7\025\uffa7\044\uffa7\046\uffa7\050\uffa7\051\uffa7\054" +
    "\uffa7\001\002\000\052\003\uffa9\005\140\007\uffa9\011\uffa9" +
    "\012\uffa9\013\137\014\136\015\uffa9\016\uffa9\017\uffa9\020" +
    "\uffa9\021\uffa9\022\uffa9\024\141\025\uffa9\044\uffa9\046\uffa9" +
    "\050\uffa9\051\uffa9\054\uffa9\001\002\000\024\004\111\005" +
    "\113\006\112\010\071\011\130\012\107\037\114\041\127" +
    "\043\115\001\002\000\024\004\uff95\005\uff95\006\uff95\010" +
    "\uff95\011\uff95\012\uff95\037\uff95\041\uff95\043\uff95\001\002" +
    "\000\024\004\uff96\005\uff96\006\uff96\010\uff96\011\uff96\012" +
    "\uff96\037\uff96\041\uff96\043\uff96\001\002\000\024\004\uff91" +
    "\005\uff91\006\uff91\010\uff91\011\uff91\012\uff91\037\uff91\041" +
    "\uff91\043\uff91\001\002\000\024\004\uff93\005\uff93\006\uff93" +
    "\010\uff93\011\uff93\012\uff93\037\uff93\041\uff93\043\uff93\001" +
    "\002\000\024\004\uff94\005\uff94\006\uff94\010\uff94\011\uff94" +
    "\012\uff94\037\uff94\041\uff94\043\uff94\001\002\000\024\004" +
    "\uff92\005\uff92\006\uff92\010\uff92\011\uff92\012\uff92\037\uff92" +
    "\041\uff92\043\uff92\001\002\000\042\003\uffac\007\uffac\011" +
    "\130\012\107\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac" +
    "\022\uffac\025\134\044\uffac\046\uffac\050\uffac\051\uffac\054" +
    "\uffac\001\002\000\020\015\152\016\151\017\153\020\146" +
    "\021\150\022\147\044\156\001\002\000\052\003\uffa0\005" +
    "\uffa0\007\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0" +
    "\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\024\uffa0\025" +
    "\uffa0\044\uffa0\046\uffa0\050\uffa0\051\uffa0\054\uffa0\001\002" +
    "\000\052\003\uffa3\005\uffa3\007\uffa3\011\uffa3\012\uffa3\013" +
    "\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3" +
    "\022\uffa3\024\uffa3\025\uffa3\044\uffa3\046\uffa3\050\uffa3\051" +
    "\uffa3\054\uffa3\001\002\000\052\003\uffa2\005\uffa2\007\uffa2" +
    "\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017" +
    "\uffa2\020\uffa2\021\uffa2\022\uffa2\024\uffa2\025\uffa2\044\uffa2" +
    "\046\uffa2\050\uffa2\051\uffa2\054\uffa2\001\002\000\020\004" +
    "\ufff1\007\ufff1\033\ufff1\035\ufff1\036\ufff1\040\ufff1\042\ufff1" +
    "\001\002\000\006\003\uffd9\007\uffd9\001\002\000\030\004" +
    "\064\007\uffdb\010\071\026\065\030\074\031\106\032\060" +
    "\036\011\040\023\055\054\056\070\001\002\000\010\004" +
    "\013\036\011\040\023\001\002\000\006\044\166\054\167" +
    "\001\002\000\004\003\206\001\002\000\024\004\111\005" +
    "\113\006\112\010\071\011\130\012\107\037\114\041\127" +
    "\043\115\001\002\000\020\015\152\016\151\017\153\020" +
    "\146\021\150\022\147\054\171\001\002\000\006\004\174" +
    "\010\071\001\002\000\060\003\uff99\005\uff99\007\uff99\011" +
    "\uff99\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99\017\uff99" +
    "\020\uff99\021\uff99\022\uff99\023\uff99\024\uff99\025\uff99\044" +
    "\uff99\046\uff99\047\202\050\uff99\051\uff99\053\201\054\uff99" +
    "\001\002\000\004\044\175\001\002\000\060\003\uff98\005" +
    "\uff98\007\uff98\011\uff98\012\uff98\013\uff98\014\uff98\015\uff98" +
    "\016\uff98\017\uff98\020\uff98\021\uff98\022\uff98\023\uff98\024" +
    "\uff98\025\uff98\044\uff98\046\uff98\047\uff98\050\uff98\051\uff98" +
    "\053\uff98\054\uff98\001\002\000\004\052\176\001\002\000" +
    "\030\004\064\007\uffdb\010\071\026\065\030\074\031\106" +
    "\032\060\036\011\040\023\055\054\056\070\001\002\000" +
    "\004\007\200\001\002\000\032\003\uffd1\004\uffd1\007\uffd1" +
    "\010\uffd1\026\uffd1\030\uffd1\031\uffd1\032\uffd1\036\uffd1\040" +
    "\uffd1\055\uffd1\056\uffd1\001\002\000\006\004\174\010\071" +
    "\001\002\000\024\004\111\005\113\006\112\010\071\011" +
    "\130\012\107\037\114\041\127\043\115\001\002\000\020" +
    "\015\152\016\151\017\153\020\146\021\150\022\147\050" +
    "\204\001\002\000\060\003\uff97\005\uff97\007\uff97\011\uff97" +
    "\012\uff97\013\uff97\014\uff97\015\uff97\016\uff97\017\uff97\020" +
    "\uff97\021\uff97\022\uff97\023\uff97\024\uff97\025\uff97\044\uff97" +
    "\046\uff97\047\uff97\050\uff97\051\uff97\053\uff97\054\uff97\001" +
    "\002\000\054\003\uff9b\005\uff9b\007\uff9b\011\uff9b\012\uff9b" +
    "\013\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b\021" +
    "\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b\044\uff9b\046\uff9b" +
    "\050\uff9b\051\uff9b\054\uff9b\001\002\000\030\004\064\007" +
    "\uffdb\010\071\026\065\030\074\031\106\032\060\036\011" +
    "\040\023\055\054\056\070\001\002\000\004\007\210\001" +
    "\002\000\032\003\uffcf\004\uffcf\007\uffcf\010\uffcf\026\uffcf" +
    "\030\uffcf\031\uffcf\032\uffcf\036\uffcf\040\uffcf\055\uffcf\056" +
    "\uffcf\001\002\000\004\007\212\001\002\000\032\003\uffd0" +
    "\004\uffd0\007\uffd0\010\uffd0\026\uffd0\030\uffd0\031\uffd0\032" +
    "\uffd0\036\uffd0\040\uffd0\055\uffd0\056\uffd0\001\002\000\030" +
    "\004\111\005\113\006\112\010\071\011\130\012\107\037" +
    "\114\041\127\043\115\046\uffaf\051\uffaf\001\002\000\006" +
    "\046\217\051\216\001\002\000\022\015\152\016\151\017" +
    "\153\020\146\021\150\022\147\046\uffb1\051\uffb1\001\002" +
    "\000\024\004\111\005\113\006\112\010\071\011\130\012" +
    "\107\037\114\041\127\043\115\001\002\000\052\003\uffb6" +
    "\005\uffb6\007\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015" +
    "\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\024\uffb6" +
    "\025\uffb6\044\uffb6\046\uffb6\050\uffb6\051\uffb6\054\uffb6\001" +
    "\002\000\022\015\152\016\151\017\153\020\146\021\150" +
    "\022\147\046\uffb0\051\uffb0\001\002\000\006\004\174\010" +
    "\071\001\002\000\054\003\uff9a\005\uff9a\007\uff9a\011\uff9a" +
    "\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a\020" +
    "\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a\044\uff9a" +
    "\046\uff9a\050\uff9a\051\uff9a\054\uff9a\001\002\000\026\003" +
    "\225\004\111\005\113\006\112\010\071\011\130\012\107" +
    "\037\114\041\127\043\115\001\002\000\020\015\152\016" +
    "\151\017\153\020\146\021\150\022\147\046\227\001\002" +
    "\000\004\046\226\001\002\000\010\003\uffb8\007\uffb8\054" +
    "\uffb8\001\002\000\010\003\uffb9\007\uffb9\054\uffb9\001\002" +
    "\000\010\004\uffbf\005\uffbf\006\uffbf\001\002\000\016\003" +
    "\uffc3\007\uffc3\023\233\044\uffc3\047\234\054\uffc3\001\002" +
    "\000\016\003\uffc2\007\uffc2\023\240\044\uffc2\047\241\054" +
    "\uffc2\001\002\000\024\004\111\005\113\006\112\010\071" +
    "\011\130\012\107\037\114\041\127\043\115\001\002\000" +
    "\004\037\235\001\002\000\004\050\236\001\002\000\022" +
    "\003\uffc1\007\uffc1\023\uffc1\044\uffc1\046\uffc1\047\uffc1\051" +
    "\uffc1\054\uffc1\001\002\000\026\003\uffc5\007\uffc5\015\152" +
    "\016\151\017\153\020\146\021\150\022\147\044\uffc5\054" +
    "\uffc5\001\002\000\024\004\111\005\113\006\112\010\071" +
    "\011\130\012\107\037\114\041\127\043\115\001\002\000" +
    "\004\037\242\001\002\000\004\050\243\001\002\000\022" +
    "\003\uffc0\007\uffc0\023\uffc0\044\uffc0\046\uffc0\047\uffc0\051" +
    "\uffc0\054\uffc0\001\002\000\026\003\uffc4\007\uffc4\015\152" +
    "\016\151\017\153\020\146\021\150\022\147\044\uffc4\054" +
    "\uffc4\001\002\000\024\004\111\005\113\006\112\010\071" +
    "\011\130\012\107\037\114\041\127\043\115\001\002\000" +
    "\020\015\152\016\151\017\153\020\146\021\150\022\147" +
    "\044\247\001\002\000\004\052\250\001\002\000\030\004" +
    "\064\007\uffdb\010\071\026\065\030\074\031\106\032\060" +
    "\036\011\040\023\055\054\056\070\001\002\000\004\007" +
    "\252\001\002\000\034\003\uffd3\004\uffd3\007\uffd3\010\uffd3" +
    "\026\uffd3\027\253\030\uffd3\031\uffd3\032\uffd3\036\uffd3\040" +
    "\uffd3\055\uffd3\056\uffd3\001\002\000\004\052\254\001\002" +
    "\000\030\004\064\007\uffdb\010\071\026\065\030\074\031" +
    "\106\032\060\036\011\040\023\055\054\056\070\001\002" +
    "\000\004\007\256\001\002\000\032\003\uffd2\004\uffd2\007" +
    "\uffd2\010\uffd2\026\uffd2\030\uffd2\031\uffd2\032\uffd2\036\uffd2" +
    "\040\uffd2\055\uffd2\056\uffd2\001\002\000\026\004\064\010" +
    "\071\026\065\030\074\031\106\032\060\036\011\040\023" +
    "\055\054\056\070\001\002\000\006\003\uffda\007\uffda\001" +
    "\002\000\006\004\262\010\071\001\002\000\062\003\uff98" +
    "\005\uff98\007\uff98\011\uff98\012\uff98\013\uff98\014\uff98\015" +
    "\uff98\016\uff98\017\uff98\020\uff98\021\uff98\022\uff98\023\uff98" +
    "\024\uff98\025\uff98\044\uff98\045\uffb3\046\uff98\047\uff98\050" +
    "\uff98\051\uff98\053\uff98\054\uff98\001\002\000\004\045\uffb2" +
    "\001\002\000\030\004\064\007\uffdb\010\071\026\065\030" +
    "\074\031\106\032\060\036\011\040\023\055\054\056\070" +
    "\001\002\000\026\003\267\004\111\005\113\006\112\010" +
    "\071\011\130\012\107\037\114\041\127\043\115\001\002" +
    "\000\020\015\152\016\151\017\153\020\146\021\150\022" +
    "\147\044\273\001\002\000\004\052\270\001\002\000\030" +
    "\004\064\007\uffdb\010\071\026\065\030\074\031\106\032" +
    "\060\036\011\040\023\055\054\056\070\001\002\000\004" +
    "\007\272\001\002\000\032\003\uffcc\004\uffcc\007\uffcc\010" +
    "\uffcc\026\uffcc\030\uffcc\031\uffcc\032\uffcc\036\uffcc\040\uffcc" +
    "\055\uffcc\056\uffcc\001\002\000\004\052\274\001\002\000" +
    "\030\004\064\007\uffdb\010\071\026\065\030\074\031\106" +
    "\032\060\036\011\040\023\055\054\056\070\001\002\000" +
    "\004\007\276\001\002\000\032\003\uffce\004\uffce\007\uffce" +
    "\010\uffce\026\uffce\030\uffce\031\uffce\032\uffce\036\uffce\040" +
    "\uffce\055\uffce\056\uffce\001\002\000\004\007\300\001\002" +
    "\000\032\003\uffcd\004\uffcd\007\uffcd\010\uffcd\026\uffcd\030" +
    "\uffcd\031\uffcd\032\uffcd\036\uffcd\040\uffcd\055\uffcd\056\uffcd" +
    "\001\002\000\024\004\111\005\113\006\112\010\071\011" +
    "\130\012\107\037\114\041\127\043\115\001\002\000\026" +
    "\003\uffae\007\uffae\015\152\016\151\017\153\020\146\021" +
    "\150\022\147\044\uffae\054\uffae\001\002\000\010\003\304" +
    "\004\174\010\071\001\002\000\004\046\307\001\002\000" +
    "\004\046\306\001\002\000\010\003\uffbb\007\uffbb\054\uffbb" +
    "\001\002\000\010\003\uffba\007\uffba\054\uffba\001\002\000" +
    "\004\004\313\001\002\000\010\046\uff84\047\234\051\uff84" +
    "\001\002\000\010\046\uff83\047\241\051\uff83\001\002\000" +
    "\010\046\uff82\047\234\051\uff82\001\002\000\010\046\uff81" +
    "\047\241\051\uff81\001\002\000\020\004\uffec\007\uffec\033" +
    "\uffec\035\uffec\036\uffec\040\uffec\042\uffec\001\002\000\006" +
    "\004\317\005\230\001\002\000\006\047\234\054\ufff3\001" +
    "\002\000\006\047\241\054\ufff2\001\002\000\006\003\322" +
    "\045\323\001\002\000\030\004\064\007\uffdb\010\071\026" +
    "\065\030\074\031\106\032\060\036\011\040\023\055\054" +
    "\056\070\001\002\000\014\003\045\004\013\036\011\040" +
    "\023\046\uff88\001\002\000\004\046\325\001\002\000\006" +
    "\003\326\052\327\001\002\000\030\004\064\007\uffdb\010" +
    "\071\026\065\030\074\031\106\032\060\036\011\040\023" +
    "\055\054\056\070\001\002\000\032\003\uffdb\004\064\007" +
    "\uffdb\010\071\026\065\030\074\031\106\032\060\036\011" +
    "\040\023\055\054\056\070\001\002\000\006\003\332\007" +
    "\331\001\002\000\024\002\uffe3\004\uffe3\007\uffe3\033\uffe3" +
    "\034\uffe3\035\uffe3\036\uffe3\040\uffe3\042\uffe3\001\002\000" +
    "\024\002\uffdf\004\uffdf\007\uffdf\033\uffdf\034\uffdf\035\uffdf" +
    "\036\uffdf\040\uffdf\042\uffdf\001\002\000\004\007\334\001" +
    "\002\000\024\002\uffe1\004\uffe1\007\uffe1\033\uffe1\034\uffe1" +
    "\035\uffe1\036\uffe1\040\uffe1\042\uffe1\001\002\000\004\007" +
    "\336\001\002\000\024\002\uffdd\004\uffdd\007\uffdd\033\uffdd" +
    "\034\uffdd\035\uffdd\036\uffdd\040\uffdd\042\uffdd\001\002\000" +
    "\004\054\340\001\002\000\022\002\ufff8\004\ufff8\033\ufff8" +
    "\034\ufff8\035\ufff8\036\ufff8\040\ufff8\042\ufff8\001\002\000" +
    "\006\003\342\052\343\001\002\000\012\004\013\007\uffe7" +
    "\036\011\040\023\001\002\000\014\003\uffe7\004\013\007" +
    "\uffe7\036\011\040\023\001\002\000\006\003\352\007\351" +
    "\001\002\000\010\003\uffe5\007\uffe5\054\uffe5\001\002\000" +
    "\010\003\uffe8\007\uffe8\054\347\001\002\000\010\004\013" +
    "\036\011\040\023\001\002\000\010\003\uffe6\007\uffe6\054" +
    "\uffe6\001\002\000\024\002\ufff7\004\ufff7\007\ufff7\033\ufff7" +
    "\034\ufff7\035\ufff7\036\ufff7\040\ufff7\042\ufff7\001\002\000" +
    "\024\002\ufff5\004\ufff5\007\ufff5\033\ufff5\034\ufff5\035\ufff5" +
    "\036\ufff5\040\ufff5\042\ufff5\001\002\000\004\007\354\001" +
    "\002\000\024\002\ufff6\004\ufff6\007\ufff6\033\ufff6\034\ufff6" +
    "\035\ufff6\036\ufff6\040\ufff6\042\ufff6\001\002\000\014\003" +
    "\356\023\233\045\357\047\234\054\uffc3\001\002\000\030" +
    "\004\064\007\uffdb\010\071\026\065\030\074\031\106\032" +
    "\060\036\011\040\023\055\054\056\070\001\002\000\014" +
    "\003\045\004\013\036\011\040\023\046\uff88\001\002\000" +
    "\004\046\361\001\002\000\006\003\362\052\363\001\002" +
    "\000\030\004\064\007\uffdb\010\071\026\065\030\074\031" +
    "\106\032\060\036\011\040\023\055\054\056\070\001\002" +
    "\000\032\003\uffdb\004\064\007\uffdb\010\071\026\065\030" +
    "\074\031\106\032\060\036\011\040\023\055\054\056\070" +
    "\001\002\000\006\003\366\007\365\001\002\000\024\002" +
    "\uffe4\004\uffe4\007\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4" +
    "\040\uffe4\042\uffe4\001\002\000\024\002\uffe0\004\uffe0\007" +
    "\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\040\uffe0\042\uffe0" +
    "\001\002\000\004\007\370\001\002\000\024\002\uffe2\004" +
    "\uffe2\007\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\040\uffe2" +
    "\042\uffe2\001\002\000\004\007\372\001\002\000\024\002" +
    "\uffde\004\uffde\007\uffde\033\uffde\034\uffde\035\uffde\036\uffde" +
    "\040\uffde\042\uffde\001\002\000\022\002\ufffc\004\ufffc\033" +
    "\ufffc\034\ufffc\035\ufffc\036\ufffc\040\ufffc\042\ufffc\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\371\000\004\002\003\001\001\000\022\014\011\015" +
    "\014\016\005\017\016\025\020\030\004\033\006\034\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\061\336\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\315\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\026" +
    "\001\001\000\020\015\032\017\033\025\035\026\036\027" +
    "\034\033\027\034\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\062" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\022" +
    "\043\023\046\024\045\034\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\024\050\034\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\012\074\031\103\032" +
    "\066\033\061\034\065\037\102\040\100\041\055\042\076" +
    "\043\062\044\054\045\104\046\075\047\077\050\101\051" +
    "\056\052\060\053\071\054\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\012\074\031\161\032\066\033\061" +
    "\034\065\037\102\040\100\041\055\042\076\043\062\044" +
    "\054\045\104\046\075\047\077\050\101\051\056\052\060" +
    "\053\071\054\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\003\117\004" +
    "\124\005\123\006\122\007\121\010\120\011\116\012\115" +
    "\051\107\052\060\053\071\054\072\056\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\010\157\011\116\012\115\051\107\052\060\053\071\054" +
    "\072\001\001\000\020\010\156\011\116\012\115\051\107" +
    "\052\060\053\071\054\072\001\001\000\002\001\001\000" +
    "\034\003\154\004\124\005\123\006\122\007\121\010\120" +
    "\011\116\012\115\051\107\052\060\053\071\054\072\056" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\055\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\060\141\001\001\000\006\056\132" +
    "\057\131\001\001\000\022\007\130\010\120\011\116\012" +
    "\115\051\107\052\060\053\071\054\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\005" +
    "\143\006\122\007\121\010\120\011\116\012\115\051\107" +
    "\052\060\053\071\054\072\056\125\001\001\000\030\005" +
    "\134\006\122\007\121\010\120\011\116\012\115\051\107" +
    "\052\060\053\071\054\072\056\125\001\001\000\002\001" +
    "\001\000\004\060\141\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\006" +
    "\142\007\121\010\120\011\116\012\115\051\107\052\060" +
    "\053\071\054\072\056\125\001\001\000\002\001\001\000" +
    "\004\060\141\001\001\000\032\004\153\005\123\006\122" +
    "\007\121\010\120\011\116\012\115\051\107\052\060\053" +
    "\071\054\072\056\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\056\132\057\131\001\001" +
    "\000\004\055\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\012\074\031\210\032\066\033\061\034\065\037" +
    "\102\040\100\041\055\042\076\043\062\044\054\045\104" +
    "\046\075\047\077\050\101\051\056\052\060\053\071\054" +
    "\072\001\001\000\006\033\164\034\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\003\167\004\124\005" +
    "\123\006\122\007\121\010\120\011\116\012\115\051\107" +
    "\052\060\053\071\054\072\056\125\001\001\000\004\055" +
    "\144\001\001\000\010\037\172\051\056\052\171\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\012\074\031\176\032\066\033\061" +
    "\034\065\037\102\040\100\041\055\042\076\043\062\044" +
    "\054\045\104\046\075\047\077\050\101\051\056\052\060" +
    "\053\071\054\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\051\204\052\171\001\001\000\034\003\202" +
    "\004\124\005\123\006\122\007\121\010\120\011\116\012" +
    "\115\051\107\052\060\053\071\054\072\056\125\001\001" +
    "\000\004\055\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\012\074\031\206\032\066\033\061\034\065" +
    "\037\102\040\100\041\055\042\076\043\062\044\054\045" +
    "\104\046\075\047\077\050\101\051\056\052\060\053\071" +
    "\054\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\214\004\124" +
    "\005\123\006\122\007\121\010\120\011\116\012\115\036" +
    "\213\051\107\052\060\053\071\054\072\056\125\001\001" +
    "\000\002\001\001\000\004\055\144\001\001\000\034\003" +
    "\217\004\124\005\123\006\122\007\121\010\120\011\116" +
    "\012\115\051\107\052\060\053\071\054\072\056\125\001" +
    "\001\000\002\001\001\000\004\055\144\001\001\000\006" +
    "\051\221\052\171\001\001\000\002\001\001\000\034\003" +
    "\223\004\124\005\123\006\122\007\121\010\120\011\116" +
    "\012\115\051\107\052\060\053\071\054\072\056\125\001" +
    "\001\000\004\055\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\231\001\001\000\002\001\001\000\034\003\236\004\124" +
    "\005\123\006\122\007\121\010\120\011\116\012\115\051" +
    "\107\052\060\053\071\054\072\056\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\055" +
    "\144\001\001\000\034\003\243\004\124\005\123\006\122" +
    "\007\121\010\120\011\116\012\115\051\107\052\060\053" +
    "\071\054\072\056\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\055\144\001\001\000" +
    "\034\003\245\004\124\005\123\006\122\007\121\010\120" +
    "\011\116\012\115\051\107\052\060\053\071\054\072\056" +
    "\125\001\001\000\004\055\144\001\001\000\002\001\001" +
    "\000\050\012\074\031\250\032\066\033\061\034\065\037" +
    "\102\040\100\041\055\042\076\043\062\044\054\045\104" +
    "\046\075\047\077\050\101\051\056\052\060\053\071\054" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\012\074\031\254\032\066\033\061\034" +
    "\065\037\102\040\100\041\055\042\076\043\062\044\054" +
    "\045\104\046\075\047\077\050\101\051\056\052\060\053" +
    "\071\054\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\012\074\032\257\033\061\034\065\037\102\040" +
    "\100\041\055\042\076\043\062\044\054\045\104\046\075" +
    "\047\077\050\101\051\056\052\060\053\071\054\072\001" +
    "\001\000\002\001\001\000\010\051\204\052\060\054\262" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\012" +
    "\074\031\276\032\066\033\061\034\065\037\102\040\100" +
    "\041\055\042\076\043\062\044\054\045\104\046\075\047" +
    "\077\050\101\051\056\052\060\053\071\054\072\001\001" +
    "\000\034\003\265\004\124\005\123\006\122\007\121\010" +
    "\120\011\116\012\115\051\107\052\060\053\071\054\072" +
    "\056\125\001\001\000\004\055\144\001\001\000\002\001" +
    "\001\000\050\012\074\031\270\032\066\033\061\034\065" +
    "\037\102\040\100\041\055\042\076\043\062\044\054\045" +
    "\104\046\075\047\077\050\101\051\056\052\060\053\071" +
    "\054\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\012\074\031\274\032\066\033\061" +
    "\034\065\037\102\040\100\041\055\042\076\043\062\044" +
    "\054\045\104\046\075\047\077\050\101\051\056\052\060" +
    "\053\071\054\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\003\301" +
    "\004\124\005\123\006\122\007\121\010\120\011\116\012" +
    "\115\051\107\052\060\053\071\054\072\056\125\001\001" +
    "\000\004\055\144\001\001\000\006\051\304\052\171\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\311\001" +
    "\001\000\002\001\001\000\004\035\313\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\317\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\012\074\031\334\032\066\033\061\034\065\037\102\040" +
    "\100\041\055\042\076\043\062\044\054\045\104\046\075" +
    "\047\077\050\101\051\056\052\060\053\071\054\072\001" +
    "\001\000\012\022\323\023\046\024\045\034\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\012\074\031" +
    "\332\032\066\033\061\034\065\037\102\040\100\041\055" +
    "\042\076\043\062\044\054\045\104\046\075\047\077\050" +
    "\101\051\056\052\060\053\071\054\072\001\001\000\050" +
    "\012\074\031\327\032\066\033\061\034\065\037\102\040" +
    "\100\041\055\042\076\043\062\044\054\045\104\046\075" +
    "\047\077\050\101\051\056\052\060\053\071\054\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\020\352\021\345\033\344\034\065\001" +
    "\001\000\012\020\343\021\345\033\344\034\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\033\347\034\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\231\001\001\000\050\012\074\031\370" +
    "\032\066\033\061\034\065\037\102\040\100\041\055\042" +
    "\076\043\062\044\054\045\104\046\075\047\077\050\101" +
    "\051\056\052\060\053\071\054\072\001\001\000\012\022" +
    "\357\023\046\024\045\034\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\012\074\031\366\032\066\033" +
    "\061\034\065\037\102\040\100\041\055\042\076\043\062" +
    "\044\054\045\104\046\075\047\077\050\101\051\056\052" +
    "\060\053\071\054\072\001\001\000\050\012\074\031\363" +
    "\032\066\033\061\034\065\037\102\040\100\041\055\042" +
    "\076\043\062\044\054\045\104\046\075\047\077\050\101" +
    "\051\056\052\060\053\071\054\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorASTExp$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorASTExp$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorASTExp$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoExp alex = (AnalizadorLexicoExp)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorASTExp$actions {
  private final ConstructorASTExp parser;

  /** Constructor */
  CUP$ConstructorASTExp$actions(ConstructorASTExp parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action_part00000000(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorASTExp$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorASTExp$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PR ::= PR Decl 
            {
              Programa RESULT =null;
		Programa pr = (Programa)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 pr.add(d); RESULT = pr; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("PR",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PR EOF 
            {
              Object RESULT =null;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorASTExp$parser.done_parsing();
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PR ::= 
            {
              Programa RESULT =null;
		 RESULT = new Programa(new ArrayList<Dec>()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("PR",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decl ::= DecFun 
            {
              Dec RESULT =null;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = d; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Decl",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decl ::= DecType 
            {
              Dec RESULT =null;
		DecType d = (DecType)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = d; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Decl",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decl ::= DecVar2 PUNTOCOMA 
            {
              Dec RESULT =null;
		DecVar d = (DecVar)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = d; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Decl",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DecType ::= DecStruct 
            {
              DecType RESULT =null;
		DecType d = (DecType)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = d; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DecType",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DecType ::= DecClass 
            {
              DecType RESULT =null;
		DecType d = (DecType)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = d; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DecType",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$0 ::= 
            {
              DecType RESULT =null;
		DecType d = (DecType)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
 RESULT = d; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("NT$0",47, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DecType ::= DecTypedef NT$0 PUNTOCOMA 
            {
              DecType RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (DecType) ((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		DecType d = (DecType)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;

              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DecType",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DecStruct ::= STRUCT IDEN DPUNTOS DecVar ALM 
            {
              DecType RESULT =null;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		ArrayList<DecVar> v = (ArrayList<DecVar>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new DecStruct(new Iden(i.lexema), v); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DecStruct",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DecStruct ::= STRUCT IDEN error DecVar ALM 
            {
              DecType RESULT =null;
		TokenValue c = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		 System.out.println(" Missing character ':' " + c.fila);
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DecStruct",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DecStruct ::= STRUCT IDEN DPUNTOS DecVar error 
            {
              DecType RESULT =null;
		 System.out.println(" Missing character '#' ");
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DecStruct",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DecClass ::= CLASS IDEN DPUNTOS BloqueClase ALM 
            {
              DecType RESULT =null;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		ArrayList<Dec> b = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new DecClass(new Iden(i.lexema), b); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DecClass",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DecTypedef ::= TDEF Tipo IDEN 
            {
              DecType RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new DecTypedef(t, new Iden(i.lexema)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DecTypedef",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DecTypedef ::= TDEF Tipo IDEN Corch 
            {
              DecType RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		TArray c = (TArray)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 c.addType(t); RESULT = new DecTypedef(c, new Iden(i.lexema)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DecTypedef",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DecConstr ::= IDEN ALLAVE DecParam CLLAVE DPUNTOS Instrucciones ALM 
            {
              Dec RESULT =null;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		ArrayList<DecParam> p = (ArrayList<DecParam>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		ArrayList<I> ins = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new DecConstr(new Iden(i.lexema), p, ins); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DecConstr",21, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BloqueClase ::= BloqueClase BloqueClase1 
            {
              ArrayList<Dec> RESULT =null;
		ArrayList<Dec> l = (ArrayList<Dec>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Dec b = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 l.add(b); RESULT = l; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueClase",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BloqueClase ::= 
            {
              ArrayList<Dec> RESULT =null;
		 RESULT = new ArrayList<Dec>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueClase",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BloqueClase1 ::= DecConstr 
            {
              Dec RESULT =null;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = d; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueClase1",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BloqueClase1 ::= DecFun 
            {
              Dec RESULT =null;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = d; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueClase1",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BloqueClase1 ::= DecVar2 PUNTOCOMA 
            {
              Dec RESULT =null;
		DecVar d = (DecVar)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = d; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueClase1",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BloqueClase1 ::= DecStruct 
            {
              Dec RESULT =null;
		DecType d = (DecType)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = d; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueClase1",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$1 ::= 
            {
              Dec RESULT =null;
		DecType d = (DecType)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
 RESULT = d; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("NT$1",48, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BloqueClase1 ::= DecTypedef NT$1 PUNTOCOMA 
            {
              Dec RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Dec) ((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		DecType d = (DecType)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;

              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueClase1",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DecVar ::= DecVar1 
            {
              ArrayList<DecVar> RESULT =null;
		ArrayList<DecVar> l = (ArrayList<DecVar>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = l; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DecVar",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DecVar ::= 
            {
              ArrayList<DecVar> RESULT =null;

              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DecVar",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DecVar1 ::= DecVar1 PUNTOCOMA DecVar2 
            {
              ArrayList<DecVar> RESULT =null;
		ArrayList<DecVar> l = (ArrayList<DecVar>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		DecVar v = (DecVar)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 l.add(v); RESULT = l; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DecVar1",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DecVar1 ::= DecVar2 
            {
              ArrayList<DecVar> RESULT =null;
		DecVar v = (DecVar)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 ArrayList<DecVar> l = new ArrayList<DecVar>(); l.add(v); RESULT = l; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DecVar1",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DecFun ::= Tipo IDEN ALLAVE DecParam CLLAVE DPUNTOS Instrucciones ALM 
            {
              Dec RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-7)).value;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		ArrayList<DecParam> p = (ArrayList<DecParam>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		ArrayList<I> ins = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new DecFun(t, new Iden(i.lexema), p, ins); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DecFun",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DecFun ::= NULE IDEN ALLAVE DecParam CLLAVE DPUNTOS Instrucciones ALM 
            {
              Dec RESULT =null;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		ArrayList<DecParam> p = (ArrayList<DecParam>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		ArrayList<I> ins = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new DecFun(new TNule(), new Iden(i.lexema), p, ins); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DecFun",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DecFun ::= Tipo IDEN ALLAVE DecParam CLLAVE error Instrucciones ALM 
            {
              Dec RESULT =null;
		TokenValue c = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		 System.out.println(" Missing character ':' line " + c.fila);
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DecFun",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DecFun ::= NULE IDEN ALLAVE DecParam CLLAVE error Instrucciones ALM 
            {
              Dec RESULT =null;
		TokenValue c = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		 System.out.println(" Missing character ':' line " + c.fila);
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DecFun",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DecFun ::= Tipo IDEN ALLAVE DecParam CLLAVE DPUNTOS Instrucciones error 
            {
              Dec RESULT =null;
		TokenValue c = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		 System.out.println(" Missing character '#' ");
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DecFun",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DecFun ::= NULE IDEN ALLAVE DecParam CLLAVE DPUNTOS Instrucciones error 
            {
              Dec RESULT =null;
		TokenValue c = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		 System.out.println(" Missing character '#' ");
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DecFun",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DecFun ::= Tipo IDEN error Instrucciones ALM 
            {
              Dec RESULT =null;
		TokenValue c = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		 System.out.println(" Error in function declared line " + c.fila);
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DecFun",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DecFun ::= NULE IDEN error Instrucciones ALM 
            {
              Dec RESULT =null;
		TokenValue c = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		 System.out.println(" Error in function declared line " + c.fila);
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DecFun",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Instrucciones ::= Resto 
            {
              ArrayList<I> RESULT =null;
		ArrayList<I> r = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = r; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instrucciones",23, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Instrucciones ::= 
            {
              ArrayList<I> RESULT =null;
		 RESULT = new ArrayList<I>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instrucciones",23, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Resto ::= InsSimple PUNTOCOMA Resto 
            {
              ArrayList<I> RESULT =null;
		I i = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		ArrayList<I> r = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 ArrayList<I> l = new ArrayList<I>(); l.add(i); r.forEach((e)->{l.add(e);}); RESULT = l; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Resto",24, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Resto ::= InsNoSimple Instrucciones 
            {
              ArrayList<I> RESULT =null;
		I i = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		ArrayList<I> r = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 ArrayList<I> l = new ArrayList<I>(); l.add(i); r.forEach((e)->{l.add(e);}); RESULT = l; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Resto",24, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Resto ::= InsSimple 
            {
              ArrayList<I> RESULT =null;
		I i = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 ArrayList<I> l = new ArrayList<I>(); l.add(i); RESULT = l; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Resto",24, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // InsNoSimple ::= For 
            {
              I RESULT =null;
		I i = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = i; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsNoSimple",36, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // InsNoSimple ::= While 
            {
              I RESULT =null;
		I i = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = i; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsNoSimple",36, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // InsNoSimple ::= If 
            {
              I RESULT =null;
		I i = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = i; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsNoSimple",36, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // InsNoSimple ::= IfElse 
            {
              I RESULT =null;
		I i = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = i; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsNoSimple",36, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // If ::= IF APAREN Exp CPAREN DPUNTOS Instrucciones ALM 
            {
              I RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		ArrayList<I> l = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new If(e, l); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("If",37, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IfElse ::= IF APAREN Exp CPAREN DPUNTOS Instrucciones ALM ELSE DPUNTOS Instrucciones ALM 
            {
              I RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-8)).value;
		ArrayList<I> l1 = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		ArrayList<I> l2 = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new IfElse(e, l1, l2); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("IfElse",38, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // For ::= FOUG APAREN DecVar2 PUNTOCOMA Exp PUNTOCOMA Asignacion CPAREN DPUNTOS Instrucciones ALM 
            {
              I RESULT =null;
		DecVar v = (DecVar)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-8)).value;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		Asig a = (Asig)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		ArrayList<I> ins = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new For(v, e, a, ins); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("For",34, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // For ::= FOUG error Instrucciones ALM 
            {
              I RESULT =null;
		TokenValue c = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		 System.out.println(" Incorrect foug declaration line " + c.fila);
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("For",34, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // For ::= FOUG APAREN DecVar2 CPAREN error Instrucciones ALM 
            {
              I RESULT =null;
		TokenValue c = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		 System.out.println(" Missing character ':' line " + c.fila);
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("For",34, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // While ::= WHILE APAREN Exp CPAREN DPUNTOS Instrucciones ALM 
            {
              I RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		ArrayList<I> i = (ArrayList<I>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new While(e, i); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("While",35, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // While ::= WHILE error Instrucciones ALM 
            {
              I RESULT =null;
		TokenValue c = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		 System.out.println(" Incorrect whilee declaration line " + c.fila);
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("While",35, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // While ::= WHILE APAREN error DPUNTOS Instrucciones ALM 
            {
              I RESULT =null;
		TokenValue c = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		 System.out.println(" Incorrect whilee condition " + c.fila);
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("While",35, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // InsSimple ::= DecVar2 
            {
              I RESULT =null;
		DecVar i = (DecVar)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = i; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsSimple",33, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // InsSimple ::= Asignacion 
            {
              I RESULT =null;
		Asig i = (Asig)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = i; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsSimple",33, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // InsSimple ::= Leer 
            {
              I RESULT =null;
		I i = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = i; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsSimple",33, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // InsSimple ::= Escribir 
            {
              I RESULT =null;
		I i = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = i; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsSimple",33, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // InsSimple ::= Llamada 
            {
              I RESULT =null;
		E i = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = i; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsSimple",33, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // InsSimple ::= Return 
            {
              I RESULT =null;
		I i = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = i; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsSimple",33, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DecVar2 ::= Tipo IDEN ASIG Exp 
            {
              DecVar RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new DecVar(t, new Iden(i.lexema), e); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DecVar2",25, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DecVar2 ::= Tipo IDEN Corch ASIG Exp 
            {
              DecVar RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		TArray c = (TArray)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 c.addType(t); RESULT = new DecVar(c, new Iden(i.lexema), e); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DecVar2",25, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DecVar2 ::= Tipo IDEN 
            {
              DecVar RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new DecVar(t, new Iden(i.lexema)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DecVar2",25, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DecVar2 ::= Tipo IDEN Corch 
            {
              DecVar RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		TArray c = (TArray)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		  c.addType(t); RESULT = new DecVar(c, new Iden(i.lexema)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DecVar2",25, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Corch ::= ACORCH NUM CCORCH 
            {
              TArray RESULT =null;
		TokenValue e1 = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new TArray(new Num(e1.lexema)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Corch",27, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Corch ::= Corch ACORCH NUM CCORCH 
            {
              TArray RESULT =null;
		TArray c = (TArray)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		TokenValue e1 = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new TArray(c, new Num(e1.lexema)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Corch",27, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Tipo ::= Tipo AST 
            {
              Tipo RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new TPuntero(t); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo",26, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Tipo ::= IDEN 
            {
              Tipo RESULT =null;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new TBasico(i.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo",26, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Tipo ::= TINT 
            {
              Tipo RESULT =null;
		 RESULT = new TNum(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo",26, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Tipo ::= TBOOL 
            {
              Tipo RESULT =null;
		 RESULT = new TBool(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo",26, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Leer ::= READ ALLAVE Var CLLAVE 
            {
              I RESULT =null;
		V v = (V)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new Read(v); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Leer",31, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Leer ::= READ ALLAVE error CLLAVE 
            {
              I RESULT =null;
		TokenValue c = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		 System.out.println(" Error in leeg call line " + c.fila);
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Leer",31, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Escribir ::= WRITE ALLAVE Exp CLLAVE 
            {
              I RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new Write(e); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Escribir",32, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Escribir ::= WRITE ALLAVE error CLLAVE 
            {
              I RESULT =null;
		TokenValue c = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		 System.out.println(" Error in printe call line " + c.fila);
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Escribir",32, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Return ::= RETOUR Exp 
            {
              I RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new Return(e); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Return",30, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Llamada ::= Funcion ALLAVE Param CLLAVE 
            {
              E RESULT =null;
		V f = (V)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		ArrayList<E> p = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new Call(f, p); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Llamada",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Funcion ::= IDEN 
            {
              V RESULT =null;
		TokenValue aI = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new Iden(aI.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Funcion",41, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Funcion ::= Fun1 
            {
              V RESULT =null;
		V st = (V)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = st; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Funcion",41, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Fun1 ::= Var1 PUNTO IDEN 
            {
              V RESULT =null;
		V iValue = (V)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new Struct(iValue, new Iden(i.lexema)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Fun1",42, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Fun1 ::= Var1 PUNTO Fun1 
            {
              V RESULT =null;
		V iValue = (V)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		V f = (V)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new Struct(iValue, f); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Fun1",42, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Param ::= Exp 
            {
              ArrayList<E> RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 ArrayList<E> l= new ArrayList<E>(); l.add(e);
                        RESULT = l; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Param",28, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Param ::= Param COMA Exp 
            {
              ArrayList<E> RESULT =null;
		ArrayList<E> aP = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aE = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 aP.add(aE); RESULT = aP; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Param",28, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Param ::= 
            {
              ArrayList<E> RESULT =null;
		 RESULT =  new ArrayList<E>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Param",28, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Asignacion ::= Var ASIG Exp 
            {
              Asig RESULT =null;
		V aV = (V)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aExp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT = new Asig(aV, aExp); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Asignacion",29, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Exp ::= Exp1 
            {
              E RESULT =null;
		E aDeexp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDeexp; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Exp ::= Exp Op0 Exp1 
            {
              E RESULT =null;
		E aDeexp0 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		KindE aOp0 = (KindE)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(aDeexp0,aDeexp1, aOp0); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Exp1 ::= Exp2 
            {
              E RESULT =null;
		E aDeexp2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= aDeexp2; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp1",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Exp1 ::= Exp1 Op1 Exp2 
            {
              E RESULT =null;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		KindE aOp1 = (KindE)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E aDeexp2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(aDeexp1,aDeexp2, aOp1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp1",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Exp1 ::= Exp1 Op2 Exp2 
            {
              E RESULT =null;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		KindE aOp2 = (KindE)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E aDeexp2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(aDeexp1,aDeexp2, aOp2); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp1",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Exp2 ::= Exp3 
            {
              E RESULT =null;
		E aDeexp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= aDeexp; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp2",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Exp2 ::= Exp2 Op3 Exp3 
            {
              E RESULT =null;
		E aDeexp2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		KindE aOp = (KindE)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E aDeexp3 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(aDeexp2,aDeexp3, aOp); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp2",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Exp3 ::= Exp4 
            {
              E RESULT =null;
		E aDeexp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= aDeexp; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp3",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Exp3 ::= Op1 Exp4 
            {
              E RESULT =null;
		KindE aOp = (KindE)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E aExp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EUni(aExp, aOp); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp3",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Exp4 ::= Exp5 
            {
              E RESULT =null;
		E aDeexp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= aDeexp; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp4",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Exp4 ::= AST Exp5 
            {
              E RESULT =null;
		E aExp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EUni(aExp, KindE.AST); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp4",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Exp4 ::= REF Exp5 
            {
              E RESULT =null;
		E aExp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EUni(aExp, KindE.REF); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp4",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Exp5 ::= Exp6 
            {
              E RESULT =null;
		E aExp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = aExp; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp5",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Exp5 ::= APAREN Exp CPAREN 
            {
              E RESULT =null;
		E aDeexp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = aDeexp; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp5",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Exp5 ::= BOOL 
            {
              E RESULT =null;
		TokenValue bValue = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new Bool(bValue.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp5",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Exp5 ::= NUM 
            {
              E RESULT =null;
		TokenValue numValue = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new Num(numValue.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp5",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Exp6 ::= Var 
            {
              E RESULT =null;
		V aV = (V)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = aV; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp6",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Exp6 ::= Llamada 
            {
              E RESULT =null;
		E aL = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = aL; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp6",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Var ::= Var1 PUNTO Var 
            {
              V RESULT =null;
		V v1 = (V)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		V v2 = (V)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new Struct(v1, v2); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Var",39, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Var ::= THIS PUNTO Var 
            {
              V RESULT =null;
		V aI = (V)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new Struct(aI); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Var",39, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Var ::= Var1 
            {
              V RESULT =null;
		V aV = (V)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = aV; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Var",39, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Var1 ::= IDEN 
            {
              V RESULT =null;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new Iden(i.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Var1",40, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Var1 ::= Var1 ACORCH Exp CCORCH 
            {
              V RESULT =null;
		V iValue = (V)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		E aExp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new Array(iValue, aExp); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Var1",40, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Op0 ::= IGUAL 
            {
              KindE RESULT =null;
		 RESULT = KindE.IGUAL; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op0",43, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Op0 ::= DIST 
            {
              KindE RESULT =null;
		 RESULT = KindE.DIST; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op0",43, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Op0 ::= MAYOR 
            {
              KindE RESULT =null;
		 RESULT = KindE.MAYOR; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op0",43, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Op0 ::= MENOR 
            {
              KindE RESULT =null;
		 RESULT = KindE.MENOR; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op0",43, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Op0 ::= MAYORIG 
            {
              KindE RESULT =null;
		 RESULT = KindE.MAYORIG; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op0",43, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Op0 ::= MENORIG 
            {
              KindE RESULT =null;
		 RESULT = KindE.MENORIG; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op0",43, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Op1 ::= MAS 
            {
              KindE RESULT =null;
		 RESULT = KindE.MAS; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op1",44, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Op1 ::= MENOS 
            {
              KindE RESULT =null;
		 RESULT = KindE.MENOS; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op1",44, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Op2 ::= OU 
            {
              KindE RESULT =null;
		 RESULT = KindE.OU; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op2",45, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Op3 ::= DIV 
            {
              KindE RESULT =null;
		 RESULT = KindE.DIV; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op3",46, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Op3 ::= MOD 
            {
              KindE RESULT =null;
		 RESULT = KindE.MOD; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op3",46, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Op3 ::= AST 
            {
              KindE RESULT =null;
		 RESULT = KindE.AST; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op3",46, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Op3 ::= ET 
            {
              KindE RESULT =null;
		 RESULT = KindE.ET; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Op3",46, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // DecParam ::= DecParam1 
            {
              ArrayList<DecParam> RESULT =null;
		ArrayList<DecParam> d = (ArrayList<DecParam>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = d; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DecParam",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // DecParam ::= 
            {
              ArrayList<DecParam> RESULT =null;
		 RESULT = new ArrayList<DecParam>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DecParam",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // DecParam ::= error 
            {
              ArrayList<DecParam> RESULT =null;
		 System.out.println(" Error in parameter declaration ");
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DecParam",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // DecParam1 ::= DecParam2 
            {
              ArrayList<DecParam> RESULT =null;
		DecParam p = (DecParam)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 ArrayList<DecParam> d = new ArrayList<DecParam>(); d.add(p); RESULT = d; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DecParam1",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // DecParam1 ::= DecParam1 COMA DecParam2 
            {
              ArrayList<DecParam> RESULT =null;
		ArrayList<DecParam> d = (ArrayList<DecParam>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		DecParam p = (DecParam)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 d.add(p); RESULT = d; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DecParam1",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // DecParam2 ::= Tipo IDEN 
            {
              DecParam RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new DecParam(t, new Iden(i.lexema), false); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DecParam2",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // DecParam2 ::= Tipo IDEN Corch 
            {
              DecParam RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		TArray c = (TArray)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		  c.addType(t); RESULT = new DecParam(c, new Iden(i.lexema), false); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DecParam2",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // DecParam2 ::= Tipo REF IDEN 
            {
              DecParam RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new DecParam(t, new Iden(i.lexema), true); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DecParam2",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // DecParam2 ::= Tipo REF IDEN Corch 
            {
              DecParam RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		TArray c = (TArray)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		  c.addType(t); RESULT = new DecParam(c, new Iden(i.lexema), true); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DecParam2",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorASTExp$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorASTExp$do_action_part00000000(
                               CUP$ConstructorASTExp$act_num,
                               CUP$ConstructorASTExp$parser,
                               CUP$ConstructorASTExp$stack,
                               CUP$ConstructorASTExp$top);
    }
}

